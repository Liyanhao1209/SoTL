import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;/*40 1 0 00 0 1 00 0 0 00 0 1 0 */public class Main{    public static Integer[] str2nums(String s){        return Arrays.stream(s.split(" ")).map(Integer::parseInt).toArray(Integer[]::new);    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int n = Integer.parseInt(br.readLine());        List<Integer>[] g = new ArrayList[n];        Arrays.setAll(g,e->new ArrayList<>());        int[] degree = new int[n];        boolean[] vis = new boolean[n];        Arrays.fill(degree,0);        Arrays.fill(vis,false);        for (int i = 0; i < n; i++) {            Integer[] nums = str2nums(br.readLine());            for (int j = 0; j < n; j++) {                if(nums[j]!=0){                    g[i].add(j);                    degree[j]++;                }            }        }        ArrayDeque<Integer> q = new ArrayDeque<>();        for (int i = 0; i < degree.length; i++) {            if(degree[i]==0){                q.offerFirst(i);            }        }        if(q.isEmpty()){            System.out.println("ERROR");            return;        }        StringBuilder sb = new StringBuilder();        while(!q.isEmpty()){            Integer poll = q.poll();            sb.append(poll).append(" ");            vis[poll] = true;            for (Integer child : g[poll]) {                if(vis[child]){                    System.out.println("ERROR");                    return;                }                degree[child]--;                if(degree[child]==0){                    q.offerFirst(child);                }            }        }        System.out.println(sb);    }}