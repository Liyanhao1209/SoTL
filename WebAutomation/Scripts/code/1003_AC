import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayDeque;/*4+2*3-10/5#3*(7-2)#2*3/2# */public class Main{    static char[] ops = new char[]{'(',')','+','-','*','/'};    static int[] pri = new int[]{-1,-1,0,0,1,1};    public static double calExpression(String expression){        ArrayDeque<Character> stk = new ArrayDeque<>();        StringBuilder suffix = new StringBuilder();        char[] ch = expression.toCharArray();        for (int i = 0; i < ch.length;) {            char c = ch[i];            if(!contains(c)){                while(i<ch.length&&!contains(ch[i])){                    suffix.append(ch[i++]);                }                suffix.append("#"); // 操作数直接入栈            }else{                int index = indexOf(c);                if(index<=1){                    if(index==0){                        stk.push('('); // 左括号直接入栈                    }else{                        while(stk.peek()!='('){                            suffix.append(stk.pop()); // 右括号，找中间所有剩下的操作符出栈                        }                        stk.pop(); // 左括号出栈                    }                }                else{                    if(stk.isEmpty()){                        stk.push(c); // 栈空操作符入栈                        i++;                        continue;                    }                    // 当栈顶优先级低于或等于自己就将他们全部出栈                    while(!stk.isEmpty()&&pri[index]<=pri[indexOf(stk.peek())]){                        suffix.append(stk.pop());                    }                    stk.push(c);                }                i++;            }        }        while(!stk.isEmpty()){            suffix.append(stk.pop());        }        char[] exp = suffix.toString().toCharArray();        ArrayDeque<Double> st = new ArrayDeque<>(10);        for (int i = 0; i < exp.length; i++) {            char c = exp[i];            if(!contains(c)){                int num = 0;                while(i<exp.length&&exp[i]!='#'){                    num*=10;                    num+=exp[i++]-'0';                }                st.push((double)num);            }            else{                Double op1 = st.pop();                Double op2 = st.pop();                if (c == '+') {                    st.push(op1+op2);                }else if(c=='-'){                    st.push(op2-op1);                }else if(c=='*'){                    st.push(op1*op2);                }else{                    st.push(op2/op1);                }            }        }        return st.peek();    }    public static boolean contains(char c){        for (char op : ops) {            if(op==c){                return true;            }        }        return false;    }    public static int indexOf(char c){        for (int i = 0; i < ops.length; i++) {            if(ops[i]==c){                return i;            }        }        return -1;    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        String str;        while((str = br.readLine()) != null){            if(str.isEmpty()){                break;            }            System.out.println((int)calExpression(str.substring(0,str.length()-1)));        }    }}