import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;/*4 10 3 0 10 0 4 02 0 0 00 0 1 0 */public class Main{    public static Integer[] str2nums(String s){        return Arrays.stream(s.split(" ")).map(Integer::parseInt).toArray(Integer[]::new);    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        Integer[] ns = str2nums(br.readLine());        int n = ns[0];        int s = ns[1];        Integer[][] graph = new Integer[n][];        for (int i = 0; i < n; i++) {            graph[i] = str2nums(br.readLine());        }        List<Integer[]> res = trivialDijkstra(graph, s);        Integer[] dis = res.get(0);        StringBuilder sb = new StringBuilder();        for (Integer distance : dis) {            if(distance==null){                sb.append(-1);            }else if(distance==0){                continue;            }else{                sb.append(distance);            }            sb.append(" ");        }        System.out.println(sb);    }    public static List<Integer[]> trivialDijkstra(Integer[][] graph, int source){        int n = graph.length;        Integer[] dis = new Integer[n];        Arrays.fill(dis,null);        dis[source] = 0;        Integer[] pre = new Integer[n];        Arrays.fill(pre,null);        pre[source] = -1;        List<Integer> q = new ArrayList<>();        for (int i = 0; i < graph[source].length; i++) {            if(i==source) continue;            Integer w = graph[source][i];            if(w!=0){                dis[i] = w;                pre[i] = source;                q.add(i);            }        }        while(!q.isEmpty()){            Integer vertex = q.get(0);            for (Integer i : q) {                if(dis[i]<dis[vertex]){                    vertex = i;                }            }            q.remove(vertex);            for (int i = 0; i < graph[vertex].length; i++) {                Integer w = graph[vertex][i];                if(w!=0){                    int newPath = dis[vertex] + w;                    if(dis[i]==null||dis[i]>newPath){                        dis[i] = newPath;                        if(pre[i]==null){                            q.add(i);                        }                        pre[i] = vertex;                    }                }            }        }        ArrayList<Integer[]> res = new ArrayList<>();        res.add(dis);        res.add(pre);        return res;    }}