import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;/*85 29 7 8 14 23 3 11 */class Node{    int idx;    Node left;    Node right;    long weight;    Node(int id,Node l,Node r,long w){        idx = id;        left = l;        right = r;        weight = w;    }}public class Main{    public static Integer[] str2nums(String s){        return Arrays.stream(s.split(" ")).map(Integer::parseInt).toArray(Integer[]::new);    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int n = Integer.parseInt(br.readLine());        Integer[] weights = str2nums(br.readLine());        PriorityQueue<Node> pq = new PriorityQueue<>((o1, o2) -> {            if(o1.weight==o2.weight){                return Integer.compare(o1.idx,o2.idx);            }            return Long.compare(o1.weight,o2.weight);        });        for (int i = 0; i < weights.length; i++) {            Node node = new Node(i, null, null, weights[i]);            pq.offer(node);        }        if(n==1){            System.out.println("0");            return;        }        int idx = n;        while(pq.size()>1){            Node top1 = pq.poll();            Node top2 = pq.poll();            assert top2!=null;            Node l,r;            if(top1.idx<top2.idx){                l = top1;                r = top2;            }else{                l = top2;                r = top1;            }            Node node = new Node(idx++, l, r, l.weight + r.weight);            pq.offer(node);        }        Node root = pq.peek();        String[] ans = new String[n];        assert root != null;        dfs(root,"",ans);        for (String s : ans) {            System.out.println(s);        }    }    private static void dfs(Node node,String s,String[] ans){        if(node.idx<ans.length){            ans[node.idx] = s;            return;        }        dfs(node.left,s+"0",ans);        dfs(node.right,s+"1",ans);    }}